# new 的过程发生了什么
    - 先创建一个空对象 {}
    - 构造函数 constructor 以new的方式运行 
        this指向实例 运行的过程就是实例逐渐添加属性的过程
    - 默认返回对象
    - 将对象.__proto__ Duck.protutype


- js强大的表现力 对象字面量就能搞定
- 一些对象有共同的行为 每个对象字面量都有这个函数 开销太大   创建类
- 每个对象都有自己的属性  而且是不一样的 交给constructor newDuck（）
    this被指定为空对象{}
-  那些共有的方法放到prototype 原型对象上 被所有实例共享
- obj.__proto__=Duck.prototype  如果自身没有  就到原型对象上去找
- js的面向对象不是传统的面相对象  Duck构造函数 没有血缘关系
- 方法是共享的 这样性能更好 通过__proto__原型对象来查找


- 掘金 
    99%访客 用不到注册掘金  页面的注册弹窗不实例化 网站更快
    当去点击一些操作的时候  实例化一次
    再点其他地方 不会再实例化 只是将display设置为none 或 block