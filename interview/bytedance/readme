# css 适配
    - pc端大小不一样 pad 横竖屏切换 phone
    - 目的：在要适配的设备上体验一致
    - 等比例 vw/vh 相对单位 适配屏幕的宽度
        %解决不了问题
        div
            div
                div 10%
            px 绝对单位

    - 但是vw有兼容性问题 出现的比较晚  怎么办呢？
    - rem  默认16px  html 根元素字体大小做比例
# 移动适配就是要等比例
    - 移动适配用vw/vh 很棒 绝绝子  等比例
    - % 因为dom层级关系不好用
    - rem 兼容性更好
    - 运用scrip标签阻塞特性  在dom + css 并发渲染之前设置好html的fontsize
    - 样例中  1rem = 屏幕宽度十分之一
    - 考虑到移动端（phone 和pad） 会有横竖屏切换场景


# 面试
    - 书面专业表达 转换为口头面试表达
    
- 箭头函数的指向
    首先呢，箭头函数是es6引入的一种更为简洁的函数表达式，他和普通函数不同，他没有自己的this，而是继承
    外部上下文的this，
    - 区别
        普通函数在调用时，this取决于调用方式，而箭头函数不会根据调用方式改变，他的this指向是静态的，在定义时决定，绑定到定义时的上下文
        由词法作用域决定。
    - 他适用于避免this动态变化的场景，比如说在定时器，事件监听，ajax请求，promise等场景中，this指向的不确定性
        会导致一些问题，使用箭头函数可以避免这些问题。
        比如说
{
    function Person(name) {
        this.name = name;

        this.sayName = function () {
            console.log('普通函数：', this.name);
        };

        this.sayNameArrow = () => {
            console.log('箭头函数：', this.name);
        };
    }

    const person = new Person('Alice');

    const sayNameFunc = person.sayName;
    const sayNameArrowFunc = person.sayNameArrow;
    person.sayName();              // 普通函数：Alice
    person.sayNameArrow();         // 箭头函数：Alice
    person.sayNameFunc();         // 普通函数：undefined
    person.sayNameArrowFunc();    // 箭头函数：Alice
}
- cors跨域
    CORS是"跨域资源共享"（Cross-origin resource sharing），是指当浏览器在一个域名下的页面
    向另一个域名、子域、协议、端口的服务器发送请求时，会触发浏览器的同源策略（Same Origin Policy）
    这是浏览器的一种安全策略，防止不同源网页间互相访问数据造成潜在的安全问题。
    cors是一种解决方案，他是为了解决跨域请求的限制而引入的后端解决方案，通过设置特定的http响应头，明确那些域名可以访问资源
    响应头
    Access-Control-Allow-Origin: *  白名单
    Access-Control-Allow-Credentials: true  是否允许携带cookie
    Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS  允许的请求方法
    Access-Control-MAX-Age: 86400  预检请求的有效期
    - 简单请求
        - 请求方法是get,post,head
        请求头中只包含
            Accept
            Accept-Language
            Content-Language
            Content-Type: application/x-www-form-urlencoded multipart/form-data text/plain
        - 通过 Access-Control-Allow-Origin 就可以允许跨域
    - 复杂请求

        两次请求
        PUT DELETE
        浏览器发送正式请求前，会先发送一个OPTIONS请求，遇见请求询问请求方法、请求头是否被允许
        服务器返回允许的方法和请求头

- 矩阵中找值
    - 暴力解法
        - 两层循环
        - O（m+n）
    - 二分查找
        .js
- setTimeout在哪里执行
    setTimeout 回调函数 会在定时时间达到后推送到宏任务队列额中，
    事件循环会在处理完当前执行栈中的同步代码完后

-  反转二叉树
    - 遍历
        - 前序遍历
        - 中序遍历
        - 后序遍历
        - 层序遍历

    - 基于递归的办法
    [4,2,7,1,3,6,9] => [4,7,2,9,6,3,1]
    - 用数组保存的话 可以用下下标来展示节点关系
    - 左子树的下标是 2 * i + 1
    - 右子树的下标是 2 * i + 2
    - 父节点的下标是 Math.floor((i - 1) / 2)

- ts 定义 BST（Binary Search Tree）
    - 二叉搜索树
        - 左子树上所有节点的值均小于它的根节点的值
        - 右子树上所有节点的值均大于它的根节点的值
        - 以此类推，左右子树也分别为二叉搜索树
        

- eventLoop
    事件循环是JavaScript的一个机制,用于管理和调度异步操作,他基于单线程模型,通过维护一个调用栈和任务队列来协调
    代码执行.
    - 执行流程
        1. 执行栈: 同步代码首先被推入调用栈中执行,直到栈为空
        2. 任务队列: 异步任务(微任务,宏任务)在执行时不会直接进入执行栈,会先放入任务队列.
        3. 事件循环: 事件循环不断的从任务队列中取出任务将其推入调用栈中执行,只有调用栈为空,事件循环才会处理任务队列中的任务
            微任务: Promise  MutationObser nextTick
            宏任务: setTimeout setInterval I/O 
        4. 渲染更新: 事件循环还会在适当的时候进行熏染和更新, 确保用户界面的刷新
        5. 通过eventLoop机制,JavaScript实现了非阻塞的异步编程模式,允许代码在等待操作完成的同时执行其他任务
            提高了应用的响应性和性能.

- 二维数组arr ，生成一个数组，包含所有的组合，每个组合由arr的每个字数组的一个元素
    组成let arr =[[1,2],[3,4],[5,6]]
    - 排列组合的可能
    - dfs/ bfs
    - 递归/回溯

- 常见算法 
    递归、回溯、贪心、分治、动态规划

- 设计模式 Design Pattern
    不是具体业务 而是focus 代码设计
    - 登录弹窗
        单例 只需要实例化一次
        点击登录 点赞 评论等设计用户权限的地方
    - 接口 实现这个接口 面向接口编程

    - 两种写方法 
        - 面向对象
        - 闭包

- 300 最长递增子序列
    - 最值问题用动态规划或贪心算法解决
    - 递归是自顶向下解决问题 dp是自底向上
    - 递归的思考去考虑规则
    - dp 状态转移方程
    - 局部最优解 和全局最优解是保持一致的 和贪心的本质区别

    dp[i][j]

- diff算法
    - vue/react 不做DOM 使用虚拟DOM

    VDOM 由VNode 构成 对比节点
    由VNode
    ('tag',props,children)
    - 为什么是n^3 ?
        因为每个节点都要去和DOM树的节点比较这就是O(n)了，找到差异后
        进行修改又是O(n) 每个节点遍历一次再O(n),结果就是O(n^3)
        所以前端框架的 diff 约定了两种处理原则:只做同层的对比，type 变了就不再对比子节点
        如果type不同 则删了重新渲染，
- weiwan


- 最佳买卖股票时间
    